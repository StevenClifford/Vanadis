# Do Not import this script together with the 3Df32vec one, several def's clash

jmp 3DF64VEC_END

def X = 0 # 0
def Y = 8 # 1t
def Z = 16 # 2t

# this is for triangles
enum:f64 X_1 Y_1 Z_1  X_2 Y_2 Z_2  X_3 Y_3 Z_3 = <
def Tri_size = 72
def Vec_size = 24
def Tri_empty = 0+0+0 + 0+0+0 + 0+0+0
def Vec_empty = 0+0+0

insert math.vas

opens

def F64 = 10
def F32 = 9

# sta:( 4x4f64matr 4x4f64matr -- 4x4f64matr)
:4x4f64matrmul, f64
	def Mat1 = 0$
	#[[ MA00 MA10 MA20 MAtx ]    [[ MB00 MB10 MB20 MBtx ] 
	# [ MA01 MA11 MA21 MAty ]  .  [ MB01 MB11 MB21 MBty ] 
	# [ MA02 MA12 MA22 MAtz ]     [ MB02 MB12 MB22 MBtz ] 
	# [  0    0    0    1   ]]    [  0    0    0    1   ]]
	chr print "4x4f64matrmul: TO BE IMPLEMENTED", 0
	jmp 3DF64VEC_END
ret

# sta:( 4x4mat 4vec_with_angle_as_frac -- 4x4mat 4vec_with_angle )
:x_rotmat, f64; opens
	def Mat = -2$
	def Vec = -1$
	enum:f64 Angle Denom Pi Do = Vec<
	enum:f64 M00 M10 M20 Mtx    M01 M11 M21 Mty    M02 M12 M22 Mtz = Mat<
	#[[ 1   0       0    0 ]
	# [ 0 cos(a) -sin(a) 0 ]
	# [ 0 sin(a)  cos(a) 0 ]
	# [ 0   0       0    1 ]]
	cmp Do, 0
		Ce jmp x_rotmat_dontdo
		cmp Pi, 0
			Cn lib Pi_f64, Pi
		div Angle, Angle, Denom
			Cn mul Angle, Angle, Pi
		set Do, 0
	:x_rotmat_dontdo, f64
	memv Mat,       1 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 1, 0, 4t
	ex Mat<-12t>*
	lib Cos_f64, M11, Angle
	lib Sin_f64, M12, Angle
	mul M21, M12, -1
	set M22, M11
ret; clons

# sta:( 4x4mat 4vec_with_angle_as_frac -- 4x4mat 4vec_with_angle )
:y_rotmat, f64; opens
	def Mat = -2$
	def Vec = -1$
	enum:f64 Angle Denom Pi Do = Vec<
	enum:f64 M00 M10 M20 Mtx    M01 M11 M21 Mty    M02 M12 M22 Mtz = Mat<
	#[[ cos(a)  0 sin(a) 0 ]
	# [ 0       1   0    0 ]
	# [ -sin(a) 0 cos(a) 0 ]
	# [ 0       0   0    1 ]]
	cmp Do, 0
		Ce jmp y_rotmat_dontdo
		cmp Pi, 0
			Cn lib Pi_f64, Pi
		div Angle, Angle, Denom
			Cn mul Angle, Angle, Pi
		set Do, 0
	:y_rotmat_dontdo, f64
	memv Mat,       0 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 1 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 1, 0, 4t
	ex Mat<-12t>*
	lib Cos_f64, M00, Angle
	lib Sin_f64, M20, Angle
	mul M02, M20, -1
	set M22, M00
ret; clons

# sta:( 4x4mat 4vec_with_angle_as_frac -- 4x4mat 4vec_with_angle )
:z_rotmat, f64; opens
	def Mat = -2$
	def Vec = -1$
	enum:f64 Angle Denom Pi Do = Vec<
	enum:f64 M00 M10 M20 Mtx    M01 M11 M21 Mty    M02 M12 M22 Mtz = Mat<
	#[[ cos(a) -sin(a) 0  0 ]
	# [ sin(a)  cos(a) 0  0 ]
	# [   0       0    1  0 ]
	# [   0       0    0  1 ]]
	cmp Do, 0
		Ce jmp z_rotmat_dontdo
		cmp Pi, 0
			Cn lib Pi_f64, Pi
		div Angle, Angle, Denom
			Cn mul Angle, Angle, Pi
		set Do, 0
	:z_rotmat_dontdo, f64
	memv Mat,       0 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 1 + 0, 0, 4t
	memv Mat<4t>*~, 0 + 0 + 0 + 1, 0, 4t
	ex Mat<-12t>*
	lib Cos_f64, M00, Angle
	lib Sin_f64, M01, Angle
	mul M10, M01, -1
	set M11, M00
ret; clons

# sta:( vec[] 4x4matr 4vec -- vec[] 4x4matr transformed4vec )
:transform, f64; opens
	def Trav = -3$
	def TraM = -2$
	def Tres = -1$
	enum:f64 M00 M10 M20 Mtx    M01 M11 M21 Mty    M02 M12 M22 Mtz = TraM<
	#[[ M00 M10 M20 Mtx ]    [ X ]   [ M00*X + M10*Y + M20*Z + Mtx ]
	# [ M01 M11 M21 Mty ]  . [ Y ] = [ M01*X + M11*Y + M21*Z + Mty ]
	# [ M02 M12 M22 Mtz ]    [ Z ]   [ M02*X + M12*Y + M22*Z + Mtz ]
	# [  0   0   0   1  ]]   [ 1 ]   [               1             ]
#	push 0+0+0+0
#	rsz Tres, 4t
	memv Tres, Trav, Trav.o, Vec_size
	def TD = Tres<3t>
	mul TD     , M00    , Trav<X>
	mul Tres<X>, M10    , Trav<Y>
	add Tres<X>, Tres<X>, TD
	mul TD     , M20    , Trav<Z>
	add TD     , TD     , Mtx
	add Tres<Y>, Tres<Z>, TD

	mul TD     , M01    , Trav<X>
	mul Tres<Y>, M11    , Trav<Y>
	add Tres<Y>, Tres<Y>, TD
	mul TD     , M21    , Trav<Z>
	add TD     , TD     , Mty
	add Tres<Y>, Tres<Y>, TD

	mul TD     , M02    , Trav<X>
	mul Tres<Z>, M12    , Trav<Y>
	add Tres<Z>, Tres<Z>, TD
	mul TD     , M22    , Trav<Z>
	add TD     , TD     , Mtz
	add Tres<Z>, Tres<Z>, TD
#	rsz 0@, 3t
ret; clons

# sta:( triangle[] -- triangle[] normal_vec)
# 3 - 2 x 1 - 3
:tri_normal, f64; opens
	def Tri = -1$
	def V3_V2 = 0$
	def V1_V3 = 1$
	def A = V3_V2
	def B = V1_V3
	push 0+0+0
	push 0+0+0

	sub V3_V2[X], Tri.X_3, Tri.X_2
	sub V3_V2[Y], Tri.Y_3, Tri.Y_2
	sub V3_V2[Z], Tri.Z_3, Tri.Z_2

	sub V1_V3[X], Tri.X_1, Tri.X_3
	sub V1_V3[Y], Tri.Y_1, Tri.Y_3
	sub V1_V3[Z], Tri.Z_1, Tri.Z_3
	#sta:( tri[] ' V3-V2  V1-V3 )

	call vec_cross
	#sta:( tri[] ' vec  V3-V2xV1-V3 )
	f64 memv A, B, 0, Vec_size

	call vec_mag #sta:( cross cross -- cross vec_w_mag )
	f64
	div A[X], A[X], B[X]
	div A[Y], A[Y], B[X]
	div A[Z], A[Z], B[X]
	free 1
ret; clons

# sta:( vec1[] vec2 -- vec1[] vec_with_vec1.vec2 )
:vec_dot, f64; opens
	def V = -2$
	def U = -1$
	mul U<X>, U<X>, V<X>  # x1*x2
	mul U<Y>, U<Y>, V<Y>  # y1*y2
	mul U<Z>, U<Z>, V<Z>  # z1*z2
	add U<Y>, U<Y>, U<Z>  # y + z
	add U<X>, U<X>, U<Y>  # x + ...
ret;clons

# sta:( vec1[] vec2 -- vec1[] vec1xvec2 )
:vec_cross, f64; opens
	# [ V.X ]   [ U.X ]   [ V.Y*U.Z - V.Z*U.Y ]
	# [ V.Y ] x [ U.Y ] = [ V.Z*U.X - V.X*U.Z ]
	# [ V.Z ]   [ U.Z ]   [ V.X*U.Y - V.Y*U.X ]
	def V = -2$
	def U = -1$
	def Res = 0$
	def D = 24
	push 0 + 0 + 0 + 0

	mul Res<X>, V<Y> , U<Z>
	mul Res<D>, V<Z> , U<Y> 
	#-------------------------
	sub Res<X>, Res<X>, Res<D>

	mul Res<Y>, V<Z> , U<X>
	mul Res<D>, V<X> , U<Z>
	#-------------------------
	sub Res<Y>, Res<Y>, Res<D>

	mul Res<Z>, V<X> , U<Y>
	mul Res<D>, V<Y> , U<X>
	#-------------------------
	sub Res<Z>, Res<Z>, Res<D>

	rsz Res, 3t
	pop U
ret; clons

# sta:( vec[] vec_with_nr -- vec[] vec/nr )
:vec_div, f64
	div -1$[Y], -2$<Y>, -1$[X]
	div -1$[Z], -2$<Z>, -1$[X]
	div -1$[X], -2$<X>, -1$[X]
ret

# sta:( vec1[] vec2 -- vec1[] vec1-vec2 )
:vec_sub, f64
	sub -1$[X], -2$<X>, -1$[X]
	sub -1$[Y], -2$<Y>, -1$[Y]
	sub -1$[Z], -2$<Z>, -1$[Z]
ret

# sta:( vec1[] vec2 -- vec1[] vec1+vec2 )
:vec_add, f64
	add -1$[X], -2$<X>, -1$[X]
	add -1$[Y], -2$<Y>, -1$[Y]
	add -1$[Z], -2$<Z>, -1$[Z]
ret

# sta:( vec[] vec -- vec[] vec_with_length )
:vec_mag, f64; opens
	enum:f64 Mag A B = -1$[
	def Vec = -2$
	mul Mag, Vec<X>, Vec<X> # X^2
	mul A  , Vec<Y>, Vec<Y> # Y^2
	mul B  , Vec<Z>, Vec<Z> # Z^2
	add Mag, Mag, A # X^2 + Y^2
	add Mag, Mag, B # ... + Z^2
	lib Sqrt_f64, Mag, Mag
ret; clons

# sta: ( tri[] -- tri[] )
:tri_print, chr; opens
	def Tri = -1$
	print "(\n\t", 1
		f64 dprint Tri.X_1, 1#"FFFFFFFF"!
		chr print ", ", 1
		f64 dprint Tri.Y_1, 1
		chr print ", ", 1
		f64 dprint Tri.Z_1, 1
	chr print "\n\t", 1
		f64 dprint Tri.X_2, 1
		chr print ", ", 1
		f64 dprint Tri.Y_2, 1
		chr print ", ", 1
		f64 dprint Tri.Z_2, 1
	chr print "\n\t", 1
		f64 dprint Tri.X_3, 1
		chr print ", ", 1
		f64 dprint Tri.Y_3, 1
		chr print ", ", 1
		f64 dprint Tri.Z_3, 1
	chr print "\n)", 0
ret; clons

# sta: ( vec[] -- vec[] )
:vec_print, chr
	print "( ", 1
	f64 dprint -1$<X>, 1
	chr print ", ", 1
	f64 dprint -1$<Y>, 1
	chr print ", ", 1
	f64 dprint -1$<Z>, 1
	chr print " )", 0
ret

clons

:3DF64VEC_END
