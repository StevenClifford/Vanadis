#!/bin/vic
jmp MAIN

:init, u8; alloc 2
	rsz 0$, 79
	sub 1$!, 0$.l, 1
	set 0$[1$!], 1
	free 1
	ret

:iter, u8; alloc 2
	let Old = -1$; let New = 0$
	mov New, Old[0]*~
	rsz 1$, 3
	let Length = 1$[2]
	sub Length, New.l, 2
	jmp itercon
	# a b c, !((a & b) & c) & (b | c)
	let A = Old<0>; let B = Old<1>; let C = Old<2>
	let Gr1 = 1$[0]; let Gr2 = 1$[1]
	:iterfor, u8
		or Gr1, B, C
		and Gr2, A, B
		and Gr2, Gr2, C
		not Gr2, Gr2
		and New<1>, Gr2, Gr1
		ex Old<1>* New<1>*
		:itercon, u8
#		printd Old.o, 0
		cmp Old.o, Length
			Cs jmp iterfor
	free 1
	pop Old
	ret

:prin, u8
	ex -1$[0]*
#	print -1$, 0
	:prinloop, chr
		cmp -1$<0>, 0
		Cn print "# ", 1
		Ce print "  ", 1
		cmp -1$<1>*~.o, 0
			Cn jmp prinloop
	print "\n", 1
	ret

:MAIN
call init
call prin
:loop
	call iter
	call prin
	u8 cmp 0$[1], 1
		Cn jmp loop
